@page "/magazines"
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime

<PageTitle>Magazines - ShyvnTech</PageTitle>

<div class="min-h-screen bg-gray-50">
    <!-- Header Section -->
    <section class="bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 text-white py-16">
        <div class="container mx-auto px-4">
            <div class="text-center">
                <h1 class="text-4xl md:text-5xl font-bold mb-4">ShyvnTech Magazines</h1>
                <p class="text-xl text-blue-100 max-w-2xl mx-auto">
                    Discover the latest in technology, innovation, and career guidance through our digital magazine collection.
                </p>
            </div>
        </div>
    </section>

    <!-- Latest Issue Section -->
    @if (latestMagazine != null)
    {
        <section class="py-16">
            <div class="container mx-auto px-4">
                <div class="text-center mb-12">
                    <h2 class="text-3xl font-bold text-gray-800 mb-4">Latest Issue</h2>
                    <div class="w-24 h-1 bg-gradient-to-r from-blue-500 to-purple-500 mx-auto"></div>
                </div>
                
                <div class="max-w-4xl mx-auto">
                    <div class="bg-white rounded-2xl shadow-xl overflow-hidden">
                        <div class="md:flex">
                            <div class="md:w-1/3">
                                <div class="h-64 md:h-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center">
                                    <div class="text-white text-center p-8">
                                        <div class="text-6xl mb-2">ðŸ“–</div>
                                        <div class="text-sm font-semibold">@latestMagazine.IssueDate</div>
                                    </div>
                                </div>
                            </div>
                            <div class="md:w-2/3 p-8">
                                <div class="uppercase tracking-wide text-sm text-indigo-600 font-semibold mb-1">Latest Issue</div>
                                <h3 class="text-2xl font-bold text-gray-900 mb-4">@latestMagazine.Title</h3>
                                <p class="text-gray-600 mb-6">@latestMagazine.Description</p>
                                <div class="flex space-x-4">
                                    <button @onclick="() => DownloadPdf(latestMagazine.PdfUrl)"
                                            class="px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white font-semibold rounded-lg hover:from-blue-600 hover:to-purple-700 transition-all duration-300 transform hover:scale-105">
                                        <svg class="w-5 h-5 inline-block mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                        </svg>
                                        Download PDF
                                    </button>
                                    <button @onclick="() => ViewMagazine(latestMagazine.Id)"
                                            class="px-6 py-3 border-2 border-indigo-500 text-indigo-600 font-semibold rounded-lg hover:bg-indigo-50 transition-all duration-300">
                                        View Details
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    }

    <!-- All Magazines Section -->
    <section class="py-16 bg-white">
        <div class="container mx-auto px-4">
            <div class="text-center mb-12">
                <h2 class="text-3xl font-bold text-gray-800 mb-4">All Issues</h2>
                <div class="w-24 h-1 bg-gradient-to-r from-cyan-500 to-blue-500 mx-auto"></div>
            </div>

            @if (isLoading)
            {
                <div class="flex justify-center items-center py-16">
                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                </div>
            }
            else if (magazines != null && magazines.Any())
            {
                <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                    @foreach (var magazine in magazines)
                    {
                        <div class="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
                            <div class="h-48 bg-gradient-to-br from-cyan-400 via-blue-500 to-indigo-600 flex items-center justify-center">
                                <div class="text-white text-center">
                                    <div class="text-4xl mb-2">ðŸ“–</div>
                                    <div class="text-sm font-semibold">@magazine.IssueDate</div>
                                </div>
                            </div>
                            <div class="p-6">
                                <h3 class="text-xl font-bold text-gray-900 mb-2">@magazine.Title</h3>
                                <p class="text-gray-600 text-sm mb-4 line-clamp-2">@magazine.Description</p>
                                <div class="flex space-x-2">
                                    <button @onclick="() => DownloadPdf(magazine.PdfUrl)"
                                            class="flex-1 px-4 py-2 bg-gradient-to-r from-cyan-500 to-blue-600 text-white text-sm font-semibold rounded-lg hover:from-cyan-600 hover:to-blue-700 transition-all duration-300">
                                        <svg class="w-4 h-4 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3"></path>
                                        </svg>
                                        Download
                                    </button>
                                    <button @onclick="() => ViewMagazine(magazine.Id)"
                                            class="px-4 py-2 border border-gray-300 text-gray-700 text-sm font-semibold rounded-lg hover:bg-gray-50 transition-all duration-300">
                                        View
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-16">
                    <div class="text-6xl mb-4">ðŸ“š</div>
                    <h3 class="text-xl font-semibold text-gray-800 mb-2">No magazines available</h3>
                    <p class="text-gray-600">Check back soon for new issues!</p>
                </div>
            }
        </div>
    </section>

    <!-- Call to Action Section -->
    <section class="py-16 bg-gradient-to-r from-indigo-600 to-purple-600">
        <div class="container mx-auto px-4 text-center">
            <h2 class="text-3xl font-bold text-white mb-4">Stay Updated</h2>
            <p class="text-xl text-indigo-100 mb-8 max-w-2xl mx-auto">
                Get notified when new issues are published and never miss out on the latest tech insights.
            </p>
            <button class="px-8 py-3 bg-white text-indigo-600 font-semibold rounded-lg hover:bg-gray-100 transition-all duration-300 transform hover:scale-105">
                Subscribe to Updates
            </button>
        </div>
    </section>
</div>

@code {
    private List<MagazineItem>? magazines;
    private MagazineItem? latestMagazine;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadMagazines();
        await LoadLatestMagazine();
    }

    private async Task LoadMagazines()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("MagazineApi");
            var response = await httpClient.GetStringAsync("api/magazines");
            magazines = JsonSerializer.Deserialize<List<MagazineItem>>(response, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
        }
        catch (Exception ex)
        {
            // Handle error - could log or show user message
            Console.WriteLine($"Error loading magazines: {ex.Message}");
            magazines = new List<MagazineItem>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadLatestMagazine()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("MagazineApi");
            var response = await httpClient.GetStringAsync("api/magazines/latest");
            latestMagazine = JsonSerializer.Deserialize<MagazineItem>(response, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading latest magazine: {ex.Message}");
        }
    }

    private async Task DownloadPdf(string pdfUrl)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("open", pdfUrl, "_blank");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading PDF: {ex.Message}");
        }
    }

    private void ViewMagazine(int id)
    {
        // Navigate to magazine detail page
        // You can implement this when you create a magazine detail page
        Console.WriteLine($"Viewing magazine with ID: {id}");
    }

    public class MagazineItem
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string IssueDate { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string CoverImageUrl { get; set; } = string.Empty;
        public string PdfUrl { get; set; } = string.Empty;
        public int Year { get; set; }
        public string Month { get; set; } = string.Empty;
    }
}

@page "/magazines"
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Magazines - ShyvnTech</PageTitle>

<!-- Font Awesome Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<style>
    @@keyframes float {
        0%, 100% { transform: translateY(0px); }
        50% { transform: translateY(-20px); }
    }
    
    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .hero-section {
        background: linear-gradient(135deg, #3182ce 0%, #2c5282 100%);
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        color: white;
        position: relative;
        overflow: hidden;
    }
    
    .floating-bg {
        position: absolute;
        border-radius: 50%;
        opacity: 0.1;
        animation: float 6s ease-in-out infinite;
    }
    
    .glass-effect {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(0, 0, 0, 0.1);
        border-radius: 20px;
        box-shadow: none !important;
    }
    
    .magazine-card {
        background: linear-gradient(145deg, #ffffff, #f8f9fa);
        border-radius: 15px;
        padding: 25px;
        transition: all 0.4s ease;
        color: #2d3748;
        border: 1px solid #e9ecef;
        box-shadow: none !important;
    }
    
    .magazine-card:hover {
        transform: translateY(-15px);
        box-shadow: none !important;
    }
    
    .btn-amazing {
        background: linear-gradient(135deg, #3182ce 0%, #2c5282 100%);
        border: none;
        color: white;
        padding: 15px 30px;
        border-radius: 25px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .btn-amazing:hover {
        transform: translateY(-2px);
        background: linear-gradient(135deg, #2c5282 0%, #2a4365 100%);
        box-shadow: none !important;
    }
    
    /* Force remove ALL shadows */
    *, *::before, *::after {
        box-shadow: none !important;
    }
    
    .category-ai { background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%); }
    .category-blockchain { background: linear-gradient(135deg, #63b3ed 0%, #4299e1 100%); }
    .category-cloud { background: linear-gradient(135deg, #90cdf4 0%, #63b3ed 100%); }
    .category-cybersecurity { background: linear-gradient(135deg, #3182ce 0%, #2c5282 100%); }
    .category-startup { background: linear-gradient(135deg, #bee3f8 0%, #90cdf4 100%); }
</style>

@if (isLoading)
    {
        <section style="padding: 100px 20px; text-align: center; background: #f8f9fa; color: #2d3748;">
            <div style="width: 100px; height: 100px; border: 8px solid #3182ce; border-top: 8px solid transparent; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 30px;"></div>
            <h3 style="font-size: 2.5rem; font-weight: bold;"><i class="fas fa-star" style="margin-right: 10px;"></i>Loading Amazing Content</h3>
        </section>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <section style="padding: 100px 20px; text-align: center; background: #fff5f5; color: #2d3748;">
            <div style="font-size: 5rem; margin-bottom: 30px; color: #e53e3e;"><i class="fas fa-exclamation-triangle"></i></div>
            <h3 style="font-size: 2.5rem; font-weight: bold; margin-bottom: 20px;">Something went wrong!</h3>
            <p style="font-size: 1.2rem; margin-bottom: 40px;">@errorMessage</p>
            <button @onclick="RefreshData" class="btn-amazing"><i class="fas fa-redo" style="margin-right: 8px;"></i>TRY AGAIN</button>
        </section>
    }
    else
    {
        @if (latestMagazine != null)
        {
            <section style="padding: 80px 20px; margin-top: -5rem; background: #FFFFFF;">
                <div style="max-width: 1000px; margin: 0 auto;">
                    <div style="text-align: center; margin-bottom: 60px;">
                        <div style="display: inline-block; padding: 15px 30px; background: linear-gradient(135deg, #3182ce, #2c5282); color: white; border-radius: 50px; font-weight: bold; margin-bottom: 30px;">
                            <i class="fas fa-fire" style="margin-right: 8px;"></i>LATEST ISSUE
                        </div>
                        <h2 class="vamos-heading" style="color: #2d3748; font-size: 3.5rem; font-weight: 900;">Featured Magazine</h2>
                    </div>
                    
                    <div class="glass-effect" style="display: flex; flex-wrap: wrap; overflow: hidden;">
                        <div style="flex: 1; min-width: 300px; display: flex; align-items: center; justify-content: center; color: white;"
                             class="@GetCategoryClass(latestMagazine.Category)">
                            <div style="text-align: center;">
                                <div style="width: 100px; height: 100px; background: rgba(255,255,255,0.9); border-radius: 20px; display: flex; align-items: center; justify-content: center; margin: 0 auto 20px; border: 2px solid rgba(45,55,72,0.1);">
                                    <i class="@GetCategoryIcon(latestMagazine.Category)" style="font-size: 3rem; color: @GetCategoryColor(latestMagazine.Category);"></i>
                                </div>
                                <div style="background: rgba(255,255,255,0.9); color: #2d3748; padding: 10px 20px; border-radius: 25px; font-weight: bold; border: 1px solid rgba(45,55,72,0.1);">
                                    <i class="fas fa-calendar-alt" style="margin-right: 8px;"></i>@latestMagazine.IssueDate
                                </div>
                            </div>
                        </div>
                        
                        <div style="flex: 1; min-width: 300px; padding: 40px; color: #2d3748;">
                            <div style="background: @GetCategoryColor(latestMagazine.Category); color: white; padding: 8px 16px; border-radius: 20px; display: inline-block; font-weight: bold; margin-bottom: 20px;">
                                @latestMagazine.Category
                            </div>
                            
                            <h3 style="font-size: 2.5rem; font-weight: bold; margin-bottom: 20px; color: #2d3748;">@latestMagazine.Title</h3>
                            <p style="font-size: 1.1rem; color: #4a5568; margin-bottom: 30px;">@latestMagazine.Description</p>
                            
                            <div style="display: flex; gap: 15px;">
                                <button @onclick="@(() => ViewMagazine(latestMagazine))" class="btn-amazing" style="flex: 1;">
                                    <i class="fas fa-book-open" style="margin-right: 8px;"></i>READ NOW
                                </button>
                                <button @onclick="@(() => DownloadPDF(latestMagazine))" style="flex: 1; background: linear-gradient(135deg, #90cdf4, #63b3ed); border: none; color: #2d3748; padding: 15px 30px; border-radius: 25px; font-weight: bold; cursor: pointer; transition: all 0.3s ease;">
                                    <i class="fas fa-download" style="margin-right: 8px;"></i>DOWNLOAD
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        }

        

        <section style="padding: 80px 20px; background: #FFFFFF;">  
            <div style="max-width: 1200px; margin: 0 auto; margin-top: -5rem;">
                @if (filteredMagazines?.Any() == true)
                {
                    <div style="text-align: center; margin-bottom: 60px;">
                        <h2 class="vamos-heading" style="color: #2d3748; font-size: 3.5rem; font-weight: 900;"><i class="fas fa-book" style="margin-right: 15px;"></i>Magazine Collection</h2>
                    </div>
                    
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 30px;">
                        @foreach (var magazine in filteredMagazines)
                        {
                            <article class="magazine-card" style="background: #FFFFFF;">
                                <div style="height: 200px; border-radius: 10px; margin-bottom: 20px; display: flex; align-items: center; justify-content: center; position: relative;" 
                                     class="@GetCategoryClass(magazine.Category)">
                                    
                                    <div style="position: absolute; top: 15px; left: 15px; background: @GetCategoryColor(magazine.Category); color: white; padding: 5px 12px; border-radius: 15px; font-size: 0.8rem; font-weight: bold;">
                                        @magazine.Category
                                    </div>
                                    
                                    @if (!string.IsNullOrEmpty(magazine.PdfUrl))
                                    {
                                        <div style="position: absolute; top: 15px; right: 15px; background: #3182ce; color: white; padding: 5px 12px; border-radius: 15px; font-size: 0.8rem; font-weight: bold;">
                                            <i class="fas fa-file-pdf" style="margin-right: 4px;"></i>PDF
                                        </div>
                                    }
                                    
                                    <div style="text-align: center; color: #2d3748;">
                                        <div style="width: 60px; height: 60px; background: rgba(255,255,255,0.9); border-radius: 15px; display: flex; align-items: center; justify-content: center; margin: 0 auto 15px; border: 2px solid rgba(45,55,72,0.1);">
                                            <i class="@GetCategoryIcon(magazine.Category)" style="font-size: 2rem; color: @GetCategoryColor(magazine.Category);"></i>
                                        </div>
                                        <div style="background: rgba(255,255,255,0.9); color: #2d3748; padding: 8px 16px; border-radius: 20px; font-weight: bold; border: 1px solid rgba(45,55,72,0.1);">
                                            <i class="fas fa-calendar-alt" style="margin-right: 5px; font-size: 0.9rem;"></i>@magazine.IssueDate
                                        </div>
                                    </div>
                                </div>
                                
                                <h3 style="font-size: 1.5rem; font-weight: bold; margin-bottom: 15px; color: #2d3748;">@magazine.Title</h3>
                                <p style="color: #4a5568; margin-bottom: 25px;">@magazine.Description</p>
                                
                                <div style="display: flex; gap: 15px;">
                                    <button @onclick="@(() => ViewMagazine(magazine))" class="btn-amazing" style="flex: 1;">
                                        <i class="fas fa-eye" style="margin-right: 5px;"></i>READ
                                    </button>
                                    <button @onclick="@(() => DownloadPDF(magazine))" style="flex: 1; background: linear-gradient(135deg, #90cdf4, #63b3ed); border: none; color: #2d3748; padding: 15px 30px; border-radius: 25px; font-weight: bold; cursor: pointer; transition: all 0.3s ease;">
                                        <i class="fas fa-file-pdf" style="margin-right: 5px;"></i>pdf
                                    </button>
                                </div>
                            </article>
                        }
                    </div>
                }
                else
                {
                    <div style="text-align: center; padding: 100px 20px; color: #2d3748;">
                        <div style="font-size: 5rem; margin-bottom: 30px; color: #4a5568;"><i class="fas fa-search"></i></div>
                        <h3 style="font-size: 2.5rem; font-weight: bold; margin-bottom: 20px;">No magazines found</h3>
                        <button @onclick="ClearFilters" class="btn-amazing"><i class="fas fa-filter" style="margin-right: 8px;"></i>CLEAR FILTERS</button>
                    </div>
                }
            </div>
        </section>
    }


@code {
    private List<MagazineItem> magazines = new();
    private List<MagazineItem> filteredMagazines = new();
    private MagazineItem? latestMagazine;
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private string currentFilter = "all";
    private string searchQuery = string.Empty;
    private Timer? searchTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await Task.WhenAll(LoadLatestMagazine(), LoadMagazinesData());
    }

    private async Task LoadLatestMagazine()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("MagazineApi");
            var response = await httpClient.GetStringAsync("api/magazines/latest");
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            latestMagazine = JsonSerializer.Deserialize<MagazineItem>(response, options);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading latest magazine: {ex.Message}");
        }
    }

    private async Task LoadMagazinesData()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            StateHasChanged();

            var httpClient = HttpClientFactory.CreateClient("MagazineApi");
            var response = await httpClient.GetStringAsync("api/magazines/archive");
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            magazines = JsonSerializer.Deserialize<List<MagazineItem>>(response, options) ?? new List<MagazineItem>();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = "Unable to load magazines.";
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ => {
            await InvokeAsync(() => {
                ApplyFilters();
                StateHasChanged();
            });
        }, null, 300, Timeout.Infinite);
    }

    private void FilterByCategory(string category)
    {
        currentFilter = category;
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        var filtered = magazines.AsEnumerable();
        if (currentFilter != "all")
            filtered = filtered.Where(m => string.Equals(m.Category, currentFilter, StringComparison.OrdinalIgnoreCase));
        if (!string.IsNullOrEmpty(searchQuery))
        {
            var search = searchQuery.ToLowerInvariant();
            filtered = filtered.Where(m => 
                m.Title.ToLowerInvariant().Contains(search) ||
                m.Description.ToLowerInvariant().Contains(search) ||
                m.Category.ToLowerInvariant().Contains(search));
        }
        filteredMagazines = filtered.ToList();
    }

    private async Task ViewMagazine(MagazineItem magazine)
    {
        try
        {
            if (!string.IsNullOrEmpty(magazine.PdfUrl))
                await JSRuntime.InvokeVoidAsync("open", magazine.PdfUrl, "_blank");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error viewing magazine: {ex.Message}");
        }
    }

    private async Task DownloadPDF(MagazineItem magazine)
    {
        try
        {
            if (!string.IsNullOrEmpty(magazine.PdfUrl))
                await JSRuntime.InvokeVoidAsync("downloadFile", magazine.PdfUrl, $"{magazine.Title}.pdf");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading PDF: {ex.Message}");
        }
    }

    private async Task RefreshData() => await LoadData();
    private void ClearFilters()
    {
        searchQuery = string.Empty;
        currentFilter = "all";
        ApplyFilters();
    }

    private List<string> GetUniqueCategories() => magazines.Where(m => !string.IsNullOrEmpty(m.Category)).Select(m => m.Category).Distinct().OrderBy(c => c).ToList();
    private int GetMagazineCount() => magazines?.Count ?? 0;
    private int GetMagazineCountByCategory(string category) => magazines.Count(m => string.Equals(m.Category, category, StringComparison.OrdinalIgnoreCase));

    private string GetCategoryClass(string? category) => category?.ToLowerInvariant() switch
    {
        "ai" => "category-ai",
        "blockchain" => "category-blockchain", 
        "cloud" => "category-cloud",
        "cybersecurity" => "category-cybersecurity",
        "startup" => "category-startup",
        _ => "category-ai"
    };

    private string GetCategoryColor(string? category) => category?.ToLowerInvariant() switch
    {
        "ai" => "#3182ce",
        "blockchain" => "#4299e1",
        "cloud" => "#63b3ed", 
        "cybersecurity" => "#2c5282",
        "startup" => "#90cdf4",
        _ => "#3182ce"
    };

    private string GetCategoryIcon(string? category) => category?.ToLowerInvariant() switch
    {
        "ai" => "fas fa-brain",
        "blockchain" => "fab fa-bitcoin",
        "cloud" => "fas fa-cloud",
        "cybersecurity" => "fas fa-shield-alt",
        "startup" => "fas fa-rocket",
        _ => "fas fa-book"
    };

    public class MagazineItem
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string IssueDate { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string CoverImageUrl { get; set; } = string.Empty;
        public string PdfUrl { get; set; } = string.Empty;
        public int Year { get; set; }
        public string Month { get; set; } = string.Empty;
        public string Category { get; set; } = string.Empty;
    }

    public void Dispose() => searchTimer?.Dispose();
} 